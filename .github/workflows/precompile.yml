name: precompile

env:
  LIBXML2_VERSION: "2.11.5"
  OPENSSL_VERSION: "3.1.3"
  LIBSSH2_VERSION: "1.11.0"
  LIBCARES2_VERSION: "1.20.1"
  SQLITE3_VERSION: "3430200"

on:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch: x86_64-linux-gnu
              cc: gcc
              cpp: g++
          - pair:
              arch: aarch64-linux-gnu
              cc: gcc-aarch64-linux-gnu
              cpp: g++-aarch64-linux-gnu
              openssl_configure: linux-aarch64
              openssl_prefix: "--cross-compile-prefix=/usr/bin/aarch64-linux-gnu-"
              cmake_toolchain_file: cc_toolchain/aarch64-linux-gnu.cmake
          - pair:
              arch: arm-linux-gnueabihf
              cc: gcc-arm-linux-gnueabihf
              cpp: g++-arm-linux-gnueabihf
              openssl_configure: linux-generic32
              openssl_prefix: "--cross-compile-prefix=/usr/bin/arm-linux-gnueabihf-"
              cmake_toolchain_file: cc_toolchain/armv7l-linux-gnueabihf.cmake
          - pair:
              arch: riscv64-linux-gnu
              cc: gcc-riscv64-linux-gnu
              cpp: g++-riscv64-linux-gnu
              openssl_configure: linux64-riscv64
              openssl_prefix: "--cross-compile-prefix=/usr/bin/riscv64-linux-gnueabihf-"
              cmake_toolchain_file: cc_toolchain/riscv64-linux-gnu.cmake

    name: ${{ matrix.pair.arch }}

    steps:
      - uses: actions/checkout@v4
      - name: Create directories
        run: |
          mkdir -p "src"
          mkdir -p "tarballs"
          mkdir -p "deps"
      - name: Install C Compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.pair.cc }} ${{ matrix.pair.cpp }}

      - name: Cache libxml2
        uses: actions/cache@v3
        id: cache-libxml2
        with:
          path: |
            tarballs/libxml2-${{ env.LIBXML2_VERSION }}.tar.gz
          key: tarballs-libxml2-${{ env.LIBXML2_VERSION }}
      - name: Get libxml2
        if: steps.cache-libxml2.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/GNOME/libxml2/archive/refs/tags/v${LIBXML2_VERSION}.tar.gz" -o "tarballs/libxml2-v${LIBXML2_VERSION}.tar.gz"

      - name: Cache libc-ares2
        uses: actions/cache@v3
        id: cache-libc-ares2
        with:
          path: |
            tarballs/c-ares-${{ env.LIBCARES2_VERSION }}.tar.gz
          key: tarballs-libc-ares-${{ env.LIBCARES2_VERSION }}
      - name: Get libc-ares2
        if: steps.cache-libc-ares2.outputs.cache-hit != 'true'
        run: |
          export LIBCARES2_VERSION_UNDERSCORE=${LIBCARES2_VERSION//./_}
          curl -fSL "https://github.com/c-ares/c-ares/releases/download/cares-${LIBCARES2_VERSION_UNDERSCORE}/c-ares-${LIBCARES2_VERSION}.tar.gz" -o "tarballs/libc-ares-${LIBCARES2_VERSION}.tar.gz"

      - name: Cache OpenSSL
        uses: actions/cache@v3
        id: cache-openssl
        with:
          path: |
            tarballs/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          key: tarballs-openssl-${{ env.OPENSSL_VERSION }}
      - name: Get OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "tarballs/openssl-${OPENSSL_VERSION}.tar.gz"

      - name: Cache libssh2
        uses: actions/cache@v3
        id: cache-libssh2
        with:
          path: |
            tarballs/libssh2-${{ env.LIBSSH2_VERSION }}.tar.gz
          key: tarballs-libssh2-${{ env.LIBSSH2_VERSION }}
      - name: Get libssh2
        if: steps.cache-libssh2.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://libssh2.org/download/libssh2-${LIBSSH2_VERSION}.tar.gz" -o "tarballs/libssh2-${LIBSSH2_VERSION}.tar.gz"

      - name: Cache SQLite3
        uses: actions/cache@v3
        id: cache-sqlite3
        with:
          path: |
            tarballs/sqlite-autoconf-${{ env.SQLITE3_VERSION }}.tar.gz
          key: tarballs-sqlite3-${{ env.SQLITE3_VERSION }}
      - name: Get SQLite3
        if: steps.cache-sqlite3.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://www.sqlite.org/2023/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz" -o "tarballs/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"

      - name: Cache compiled libxml2
        uses: actions/cache@v3
        id: cache-libxml2-compiled-linux
        with:
          path: |
            deps/libxml2-${{ env.LIBXML2_VERSION }}-${{ matrix.pair.arch }}.tar.gz
          key: deps-libxml2-${{ env.LIBXML2_VERSION }}-${{ matrix.pair.arch }}
      - name: Compile libxml2
        if: steps.cache-libxml2-compiled-linux.outputs.cache-hit != 'true'
        run: |
          export ROOT_DIR=$(pwd)
          tar -xzf "tarballs/libxml2-v${LIBXML2_VERSION}.tar.gz" -C src
          cd "src/libxml2-${LIBXML2_VERSION}"
          export CMAKE_TOOLCHAIN_FILE=-DCMAKE_TOOLCHAIN_FILE="${ROOT_DIR}/${{ matrix.pair.cmake_toolchain_file }}"
          if [ -z "${{ matrix.pair.cmake_toolchain_file }}" ]; then
            export CMAKE_TOOLCHAIN_FILE=""
          fi
          cmake -S . -B libxml2-build \
              -D BUILD_SHARED_LIBS=OFF \
              -D CMAKE_BUILD_TYPE=Release \
              -D CMAKE_INSTALL_PREFIX=/usr/local \
              -D LIBXML2_WITH_ICONV=OFF \
              -D LIBXML2_WITH_LZMA=OFF \
              -D LIBXML2_WITH_PYTHON=OFF \
              -D LIBXML2_WITH_ZLIB=OFF "${CMAKE_TOOLCHAIN_FILE}"
          cd libxml2-build && \
              make -j$(nproc) && \
              make DESTDIR="${ROOT_DIR}/deps/libxml2" install
          cd "${ROOT_DIR}/deps"
          tar -czf "libxml2-${LIBXML2_VERSION}-${{ matrix.pair.arch }}.tar.gz" -C libxml2 .

      - name: Cache compiled libc-ares
        uses: actions/cache@v3
        id: cache-libc-ares-compiled-linux
        with:
          path: |
            deps/libc-ares-${{ env.LIBCARES2_VERSION }}-${{ matrix.pair.arch }}.tar.gz
          key: deps-libc-ares-${{ env.LIBCARES2_VERSION }}-${{ matrix.pair.arch }}
      - name: Compile libc-ares
        if: steps.cache-libc-ares-compiled-linux.outputs.cache-hit != 'true'
        run: |
          export ROOT_DIR=$(pwd)
          export CONFIGURE_HOST=""
          if [ "${{ matrix.pair.arch }}" != "x86_64-linux-gnu" ]; then
            export CONFIGURE_HOST="--host=${{ matrix.pair.arch }}"
          fi
          tar -xzf "tarballs/libc-ares-${LIBCARES2_VERSION}.tar.gz" -C src
          cd "src/c-ares-${LIBCARES2_VERSION}"
          ./configure "${CONFIGURE_HOST}" --prefix=/usr/local --enable-shared=no --enable-static=yes
          make -j$(nproc) && \
              make DESTDIR="${ROOT_DIR}/deps/libc-ares" install
          cd "${ROOT_DIR}/deps"
          tar -czf "libc-ares-${LIBCARES2_VERSION}-${{ matrix.pair.arch }}.tar.gz" -C libc-ares .

      - name: Cache compiled openssl
        uses: actions/cache@v3
        id: cache-openssl-compiled-linux
        with:
          path: |
            deps/openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.pair.arch }}.tar.gz
            deps/openssl/
          key: deps-openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.pair.arch }}
      - name: Compile openssl
        if: steps.cache-openssl-compiled-linux.outputs.cache-hit != 'true'
        run: |
          export ROOT_DIR=$(pwd)
          export CONFIGURE_PARAM=""
          if [ "${{ matrix.pair.arch }}" != "x86_64-linux-gnu" ]; then
            export CONFIGURE_PARAM="${{ matrix.pair.openssl_configure }} ${{ matrix.pair.openssl_prefix }}"
          fi
          tar -xzf "tarballs/openssl-${OPENSSL_VERSION}.tar.gz" -C src
          cd "src/openssl-${OPENSSL_VERSION}"
          ./Configure "${CONFIGURE_PARAM}" --prefix=/usr/local -static
          make -j$(nproc)
          make DESTDIR="${ROOT_DIR}/deps/openssl" install_sw
          cd "${ROOT_DIR}/deps"
          tar -czf "openssl-${OPENSSL_VERSION}-${{ matrix.pair.arch }}.tar.gz" -C openssl .

      - name: Cache compiled libssh2
        uses: actions/cache@v3
        id: cache-libssh2-compiled-linux
        with:
          path: |
            deps/libssh2-${{ env.LIBSSH2_VERSION }}-${{ matrix.pair.arch }}.tar.gz
          key: deps-libssh2-${{ env.LIBSSH2_VERSION }}-${{ matrix.pair.arch }}
      - name: Compile libssh2
        if: steps.cache-libssh2-compiled-linux.outputs.cache-hit != 'true'
        run: |
          export ROOT_DIR=$(pwd)
          export CONFIGURE_HOST=""
          if [ "${{ matrix.pair.arch }}" != "x86_64-linux-gnu" ]; then
            export CONFIGURE_HOST="--host=${{ matrix.pair.arch }}"
          fi
          tar -xzf "tarballs/libssh2-${LIBSSH2_VERSION}.tar.gz" -C src
          cd "libssh2-${LIBSSH2_VERSION}"
          ./configure --with-crypto=openssl \
            --with-libssl-prefix="${ROOT_DIR}/deps/openssl/usr/local" \
            --with-libgcrypt-prefix="${ROOT_DIR}/deps/openssl/usr/local" \
            --disable-tests \
            --disable-sshd-tests \
            --disable-examples-build \
            --enable-shared=no "${CONFIGURE_HOST}"
          make -j$(nproc)
          make DESTDIR="${ROOT_DIR}/deps/libssh2" install
          cd "${ROOT_DIR}/deps"
          tar -czf "libssh2-${LIBSSH2_VERSION}-${{ matrix.pair.arch }}.tar.gz" -C libssh2 .
      
      - name: Cache compiled sqlite3
        uses: actions/cache@v3
        id: cache-sqlite3-compiled-linux
        with:
          path: |
            deps/sqlite3-${{ env.OPENSSL_VERSION }}-${{ matrix.pair.arch }}.tar.gz
          key: deps-sqlite3-${{ env.OPENSSL_VERSION }}-${{ matrix.pair.arch }}
      - name: Compile sqlite3
        if: steps.cache-sqlite3-compiled-linux.outputs.cache-hit != 'true'
        run: |
          export ROOT_DIR=$(pwd)
          export CONFIGURE_HOST=""
          if [ "${{ matrix.pair.arch }}" != "x86_64-linux-gnu" ]; then
            export CONFIGURE_HOST="--host=${{ matrix.pair.arch }}"
          fi
          tar -xzf "sqlite-autoconf-${SQLITE3_VERSION}.tar.gz" -C src
          cd "src/sqlite-autoconf-${SQLITE3_VERSION}"
          ./configure --enable-shared=no "${CONFIGURE_HOST}"
          make -j$(nproc)
          make DESTDIR="${ROOT_DIR}/deps/sqlite3" install
          cd "${ROOT_DIR}/deps"
          tar -czf "sqlite3-${SQLITE3_VERSION}-${{ matrix.pair.arch }}.tar.gz" -C sqlite3 .

      - uses: softprops/action-gh-release@v1
        with:
          files: deps/*.tar.gz
